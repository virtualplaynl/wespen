"strict mode";

class Tetrahedron extends Mesh
{
    constructor(radius = 0.5, material = new Material()) {
        var d = radius / Math.sqrt(3);

        super(material,
            [   d,  d,  d,   -d, -d,  d,   -d,  d, -d,    d, -d, -d
            ],
            false,
            [
                0.6443, 0.5, 0.933, 0, 0.3557, 0,
                0.067, 0.5, 0.6443, 0.5, 0.3557, 0,
                0.067, 0.5, 0.3557, 1, 0.6443, 0.5,
                0.3557, 1, 0.933, 1, 0.6443, 0.5
            ],
            [   2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
            ] );
    }
}

class Cube extends Mesh
{
    constructor(size = 1, material = new Material()) {
        var d = size / 2;

        super(material,
            [   -d, -d, -d,  -d, -d,  d,  -d,  d, d,  -d, d, -d,
                d,  -d, -d,   d, -d,  d,   d,  d, d,   d, d, -d
            ],
            false,
            [
                1/6, 1/3, 1/2, 1/3, 1/2, 0,  1/2, 0, 1/6, 0, 1/6, 1/3,
                1/2, 1/3, 5/6, 1/3, 5/6, 0,  5/6, 0, 1/2, 0, 1/2, 1/3,
                1/6, 2/3, 1/2, 2/3, 1/2, 1/3,  1/2, 1/3, 1/6, 1/3, 1/6, 2/3,
                1/2, 2/3, 5/6, 2/3, 5/6, 1/3,  5/6, 1/3, 1/2, 1/3, 1/2, 2/3,
                1/6, 1, 1/2, 1, 1/2, 2/3,  1/2, 2/3, 1/6, 2/3, 1/6, 1,
                1/2, 1, 5/6, 1, 5/6, 2/3,  5/6, 2/3, 1/2, 2/3, 1/2, 1
            ],
            [   0, 1, 2,  2, 3, 0, // 1 (front)
                1, 5, 6,  6, 2, 1, // 2 (right)
                5, 4, 7,  7, 6, 5, // 3 (back)
                4, 0, 3,  3, 7, 4, // 4 (left)
                3, 2, 6,  6, 7, 3, // 5 (top)
                0, 4, 5,  5, 1, 0  // 6 (bottom)
            ] );
    }
}

class Plane extends Mesh
{
    constructor(size = 10, material = new Material()) {
        var d = size / 2;

        super(material,
            [   -d, 0, -d,
                d,  0, -d,
                d,  0,  d,
                -d, 0,  d   ],
            [
                0, 1, 0, 0, 1, 0,
                0, 1, 0, 0, 1, 0
            ],
            [
                0, 1,  1, 1,  1, 0,  0, 0
            ],
            [   0, 1, 2,  2, 3, 0   ]
        );
    }
}

class Skybox extends Mesh
{
    constructor(image) {
        var size = wespen.mainCamera.farClip / 2;
        var d = size / 2;
        var e = 1/2048;

        var material = new Material(image, null, [1,1,1,1],[1,1,1,0],[0,0,0,0],0);

        super(material,
            [   -d, -d, -d,  -d, -d,  d,  -d,  d, d,  -d, d, -d,
                d,  -d, -d,   d, -d,  d,   d,  d, d,   d, d, -d
            ],
            false,
            [
                1/4+e, 2/3-e, 2/4-e, 2/3-e, 2/4-e, 1/3+e,  2/4-e, 1/3+e, 1/4+e, 1/3+e, 1/4+e, 2/3-e, // front
                2/4+e, 2/3-e, 3/4-e, 2/3-e, 3/4-e, 1/3+e,  3/4-e, 1/3+e, 2/4+e, 1/3+e, 2/4+e, 2/3-e, // right
                3/4+e, 2/3-e, 1-e,   2/3-e, 1-e,   1/3+e,  1-e,   1/3+e, 3/4+e, 1/3+e, 3/4+e, 2/3-e, // back
                0+e,   2/3-e, 1/4-e, 2/3-e, 1/4-e, 1/3+e,  1/4-e, 1/3+e, 0+e,   1/3+e, 0+e,   2/3-e, // left
                1/4+e, 1/3-e, 2/4-e, 1/3-e, 2/4-e, 0+e,    2/4-e, 0+e,   1/4+e, 0+e,   1/4+e, 1/3-e, // top
                1/4+e, 2/3+e, 1/4+e, 1-e,   2/4-e, 1-e,    2/4-e, 1-e,   2/4-e, 2/3+e, 1/4+e, 2/3+e,  // bottom
            ],
            [   0, 1, 2,  2, 3, 0, // 1 (front)
                1, 5, 6,  6, 2, 1, // 2 (right)
                5, 4, 7,  7, 6, 5, // 3 (back)
                4, 0, 3,  3, 7, 4, // 4 (left)
                3, 2, 6,  6, 7, 3, // 5 (top)
                0, 4, 5,  5, 1, 0  // 6 (bottom)
            ]);
    }
}

class Octahedron extends Mesh
{
    constructor(radius = 0.5, material = new Material()) {
        super(material,
            [   radius, 0, 0,   -radius, 0, 0,    0, radius, 0,    0, -radius, 0,    0, 0, radius,    0, 0, -radius
            ],
            false,
            [
                0.4, 0.3464, 0.6, 0,      0.2, 0,       0,   0.3464, 0.4, 0.3464, 0.2, 0,
                0,   0.3464, 0.2, 0.6928, 0.4, 0.3464,  0.2, 0.6928, 0.6, 0.6928, 0.4, 0.3464,
                0.8, 0.3464, 1,   0,      0.6, 0,       0.4, 0.3464, 0.8, 0.3464, 0.6, 0,
                0.4, 0.3464, 0.6, 0.6928, 0.8, 0.3464,  0.6, 0.6928, 1,   0.6928, 0.8, 0.3464
            ],
            [   0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
            ] );
    }
}

class Dodecahedron extends Mesh
{
    constructor(radius = 0.5, material = new Material(), smooth = false) {
        var d = radius / Math.sqrt(3);
        var t = ( 1 + Math.sqrt( 5 ) ) / 2;
        var r = d / t;
        t *= d;

        super(material,
            [
                -d, -d, -d,    -d, -d,  d,
                -d,  d, -d,    -d,  d,  d,
                d,  -d, -d,     d, -d,  d,
                d,   d, -d,     d,  d,  d,
        
                0,  -r, -t,     0, -r,  t,
                0,   r, -t,     0,  r,  t,
        
                -r, -t,  0,    -r,  t,  0,
                r,  -t,  0,     r,  t,  0,
        
                -t,  0, -r,     t,  0, -r,
                -t,  0,  r,     t,  0,  r
            ],
            smooth,
            [
                0.3207, 0.3819, 0.1983, 0.3819, 0.1605, 0.6170,
                0.3207, 0.3819, 0.1605, 0.6170, 0.2595, 0.7602, // 1
                0.3207, 0.3819, 0.2595, 0.7602, 0.3585, 0.6170,

                0.1605, 0.6170, 0.0615, 0.7602, 0.0990, 0.9932,
                0.1605, 0.6170, 0.0990, 0.9932, 0.2194, 0.9932, // 4
                0.1605, 0.6170, 0.2194, 0.9932, 0.2593, 0.7602,

                0.8397, 0.8493, 0.8020, 0.6170, 0.6792, 0.6170,
                0.8397, 0.8493, 0.6792, 0.6170, 0.6417, 0.8493, // 10
                0.8397, 0.8493, 0.6417, 0.8493, 0.7407, 0.9932,

                0.6792, 0.6170, 0.6416, 0.3819, 0.5183, 0.3819,
                0.6792, 0.6170, 0.5183, 0.3819, 0.4812, 0.6170, // 11
                0.6792, 0.6170, 0.4812, 0.6170, 0.5801, 0.7602,

                0.6416, 0.3819, 0.7407, 0.2401, 0.7030, 0.0068,
                0.6416, 0.3819, 0.7030, 0.0068, 0.5806, 0.0068, // 7
                0.6416, 0.3819, 0.5806, 0.0068, 0.5427, 0.2401,

                0.2973, 0.9932, 0.4198, 0.9932, 0.4575, 0.7602,
                0.2973, 0.9932, 0.4575, 0.7602, 0.3585, 0.6170, // 5
                0.2973, 0.9932, 0.3585, 0.6170, 0.2595, 0.7602,
                
                0.4812, 0.6170, 0.5183, 0.3819, 0.4189, 0.2401,
                0.4812, 0.6170, 0.4189, 0.2401, 0.3207, 0.3819, // 6
                0.4812, 0.6170, 0.3207, 0.3819, 0.3585, 0.6170,

                0.3585, 0.1507, 0.2595, 0.0068, 0.1605, 0.1507,
                0.3585, 0.1507, 0.1605, 0.1507, 0.1983, 0.3819, // 2
                0.3585, 0.1507, 0.1983, 0.3819, 0.3207, 0.3819,

                0.8020, 0.6170, 0.8380, 0.3819, 0.7407, 0.2401,
                0.8020, 0.6170, 0.7407, 0.2401, 0.6416, 0.3819, // 12
                0.8020, 0.6170, 0.6416, 0.3819, 0.6792, 0.6170,

                0.1983, 0.3837, 0.0988, 0.2401, 0.0000, 0.3819,
                0.1983, 0.3837, 0.0000, 0.3819, 0.0380, 0.6170, // 3
                0.1983, 0.3837, 0.0380, 0.6170, 0.1605, 0.6170,

                1.0000, 0.6170, 0.9621, 0.3819, 0.8380, 0.3819,
                1.0000, 0.6170, 0.8380, 0.3819, 0.8020, 0.6170, // 9
                1.0000, 0.6170, 0.8020, 0.6170, 0.9010, 0.7602,

                0.7785, 0.0068, 0.7407, 0.2401, 0.8380, 0.3819,
                0.7785, 0.0068, 0.8380, 0.3819, 0.9386, 0.2401, // 8
                0.7785, 0.0068, 0.9386, 0.2401, 0.9009, 0.0068
            ],
            [
                3, 11,  7,      3,  7, 15,      3, 15, 13,  // 1
                7, 19, 17,      7, 17,  6,      7,  6, 15,  // 4
                17,  4,  8,     17,  8, 10,     17, 10,  6, // 10
                8,  0, 16,      8, 16,  2,      8,  2, 10,  // 11
                0, 12,  1,      0,  1, 18,      0, 18, 16,  // 7
                6, 10,  2,      6,  2, 13,      6, 13, 15,  // 5
                2, 16, 18,      2, 18,  3,      2,  3, 13,  // 6
                18,  1,  9,     18,  9, 11,     18, 11,  3, // 2
                4, 14, 12,      4, 12,  0,      4,  0,  8,  // 12
                11,  9,  5,     11,  5, 19,     11, 19,  7, // 3
                19,  5, 14,     19, 14,  4,     19,  4, 17, // 9
                1, 12, 14,      1, 14,  5,      1,  5,  9   // 8
            ]);
    }
}
    
class Icosahedron extends Mesh
{
    constructor(radius = 0.5, material = new Material(), smooth = false) {
        var t = ( 1 + Math.sqrt( 5 ) ) / 2;
        var d = radius / Math.sqrt(1 + t * t);
        t *= d;
        
        super(material,
            [
                -d, t,  0,    d,  t,  0,   -d, -t,  0,    d, -t,  0,
                0, -d,  t,    0,  d,  t,    0, -d, -t,    0,  d, -t,
                t,  0, -d,    t,  0,  d,   -t,  0, -d,   -t,  0,  d
            ],
            smooth,
            [
                2/11, 0.3425, 3/11, 0.6575, 4/11, 0.3425,
                2/11, 0.3425, 4/11, 0.3425, 3/11, 0.0273,
                2/11, 0.3425, 1/11, 0.0273, 0/11, 0.3425,
                2/11, 0.3425, 0/11, 0.3425, 1/11, 0.6575,
                2/11, 0.3425, 1/11, 0.6575, 3/11, 0.6575,
                5/11, 0.0273,4/11, 0.3425, 6/11, 0.3425,
                4/11, 0.3425, 3/11, 0.6575, 5/11, 0.6575,
                3/11, 0.6575, 1/11, 0.6575, 2/11, 0.9727,
                11/11, 0.6575, 10/11, 0.3425, 9/11, 0.6575,
                10/11, 0.3425, 9/11, 0.0273, 8/11, 0.3425,
                7/11, 0.6575, 6/11, 0.3425, 5/11, 0.6575,
                7/11, 0.6575, 5/11, 0.6575, 6/11, 0.9727,
                7/11, 0.6575, 8/11, 0.9727, 9/11, 0.6575,
                7/11, 0.6575, 9/11, 0.6575, 8/11, 0.3425,
                7/11, 0.6575, 8/11, 0.3425, 6/11, 0.3425,
                5/11, 0.6575, 6/11, 0.3425, 4/11, 0.3425,
                4/11, 0.9727, 5/11, 0.6575, 3/11, 0.6575,
                9/11, 0.6575, 10/11, 0.9727, 11/11, 0.6575,
                8/11, 0.3425, 9/11, 0.6575, 10/11, 0.3425,
                6/11, 0.3425, 8/11, 0.3425, 7/11, 0.0273,
                
            ],
            [
                0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
                1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
                3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
                4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
            ]);
    }
}

class UVSphere extends Mesh
{
    constructor(radius = 0.5, material = new Material(), smooth = true,
        widthSegments = 24, heightSegments = 12,
        phiStart = 0, phiLength = Math.PI * 2,
        thetaStart = 0, thetaLength = Math.PI) {
    
        var x, y, sphereVertices = [], uvs = [], vertices = [], normals = [], indices = [];
    
        for (y = 0; y <= heightSegments; y ++ ) {
            var verticesRow = [];
            var uvsRow = [];

            for (x = 0; x <= widthSegments; x++) {
                var u = x / widthSegments;
                var v = y / heightSegments;
    
                var vx = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                var vy = radius * Math.cos(thetaStart + v * thetaLength);
                var vz = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);

                vertices.push(vx, vy, vz);
                uvs.push(u,v);
                normals.push(vx/radius, vy/radius, vz/radius);
    
                verticesRow.push( vertices.length / 3 - 1 );
            }
    
            sphereVertices.push(verticesRow);
        }
    
        for (y = 0; y < heightSegments; y++) {
            for (x = 0; x < widthSegments; x++) {
                var v1 = sphereVertices[y][x+1];
                var v2 = sphereVertices[y][x];
                var v3 = sphereVertices[y+1][x];
                var v4 = sphereVertices[y+1][x+1];

                if (y == 0) {
                    indices.push(v1, v3, v4);
                } else if (y == heightSegments - 1) {
                    indices.push(v1, v2, v3);
                } else {
                    indices.push(v1, v2, v4);
                    indices.push(v2, v3, v4);
                }
            }
        }
        super(material, vertices, smooth ? normals : false, uvs, indices);
    }
}